@*
    This page displays statistics about actions of a goal. It will display a line chart of the actions completed over time. The user may choose the time frame to display the chart for.
*@

@inject GoalDatabase goalDatabase
@inject NavigationManager Navigation

@using ChartJs.Blazor
@using ChartJs.Blazor.Common;
@using ChartJs.Blazor.Common.Axes;
@using ChartJs.Blazor.Common.Axes.Ticks;
@using ChartJs.Blazor.Common.Enums;
@using ChartJs.Blazor.PieChart;
@using ChartJs.Blazor.Util;
@using System.Globalization;

<style>
    .scroll{
     width: 100%;
     padding-bottom: 15px;
    }
</style>

<!-- When switching between different goals in the statistics page, ensure correct goal and data is set -->
@if (goalTitle != selectedGoal.Title)
{
    SetCurrentGoal();
    selectedAction = selectedGoal.EntryData.GoalActions[0].Action;
    _lineConfig.Options.Title.Text = "Action Data For " + selectedGoal.Title;
    ChangeChart();
}

<!-- Set a single action to display statistics for -->
<select name="actions" id="actions" @onchange="SetSelectedAction">
    @foreach (var action in selectedGoal.EntryData.GoalActions)
    {
        <option value="@action.Action" > @action.Action </option>
    }
</select>

<div class="scroll">
    <Chart Config="_lineConfig"></Chart>
</div>

<!-- Set the time frame of statistics -->
<div style="padding-bottom: 25px;">
@foreach (var timeFrame in timeFrames)
{
    <button @onclick="() => SetTimeFrame(timeFrame.Key)">@timeFrame.Key</button>
}
</div>

@code {
    [Parameter]
    public string goalTitle { get; set; }
    private Goal selectedGoal;
    private LineConfig _lineConfig = new();
    private string selectedTimeFrame = "1M";
    private Dictionary<string, int> timeFrames = new()
    {
        { "1M", 1 },
        { "4M", 4 },
        { "1Y", 12 },
        { "ALL", -1 },
    };
    private string selectedAction;

    protected override async Task OnInitializedAsync()
    {
        SetCurrentGoal();
        //set initial goal action
        selectedAction = selectedGoal.EntryData.GoalActions[0].Action;
        //create placeholder chart
        CreateChart();
        //populate placeholder chart with data
        ChangeChart();
    }

    private void SetCurrentGoal()
    {
        selectedGoal = goalDatabase.GetItem(goalTitle);
    }

    private void SetSelectedAction(ChangeEventArgs e)
    {
        selectedAction = e.Value.ToString();
        ChangeChart();
    }

    private void SetTimeFrame(string timeFrame)
    {
        selectedTimeFrame = timeFrame;
        ChangeChart();
    }

    //Calling this function will update the chart with the correct data, and set the labels.
    private void ChangeChart()
    {
        //clear data and labels in the chart to be replaced by new requested data and labels
        _lineConfig.Data.Datasets.Clear();
        _lineConfig.Data.XLabels.Clear();

        List<GoalAction> actionData = GetChartData();
        List<GoalAction> chartData = new();
        List<string> labels = new();

        //add action data to chart that the user selects to display. limited to up to 1 action
        foreach (var action in actionData)
        {
            if (action.Action == selectedAction)
            {
                chartData.Add(action);
            }
        }

        //as of right now, this does not need to be a foreach since there is only 1 selected action. but in the future if there are multiple actions to display, this will need to be a foreach
        foreach (var action in chartData)
        {
            LineDataset<double?> ratings = CreateLineDataset(action.Action);

            foreach (var actionCompleted in action.ListActionsCompleted)
            {
                DateTime labelDate;
                labelDate = DateTime.ParseExact(actionCompleted.ActionCompletedDate, "dddd, MMMM d yyyy HH:mm:ss", System.Globalization.CultureInfo.InvariantCulture);
                string label = labelDate.ToShortDateString();
                labels.Add(label);
                ratings.Add(actionCompleted.ActionsCompleted);
            }

            _lineConfig.Data.Datasets.Add(ratings);
        }

        foreach (var label in labels)
        {
            if (!_lineConfig.Data.XLabels.Contains(label))
            {
                _lineConfig.Data.XLabels.Add(label);
            }
        }
    }

    //This function will setup each data point that is graphed on the line chart
    private LineDataset<double?> CreateLineDataset(string label)
    {
        return new LineDataset<double?>
        {
            Label = label,
            BorderWidth = 3,
            BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.FromArgb(40, 255, 40)),
            PointHoverRadius = 4,
            HoverBackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.FromArgb(200, 20, 20, 20)),
        };
    }

    //This gets the selected timeframe for the data, and calls for data using the desired timeframe
    private List<GoalAction> GetChartData()
    {
        int monthCount = timeFrames[selectedTimeFrame];

        //this calculates the time frame when selecting the ALL time frame
        if (monthCount == -1)
        {
            monthCount = GoalAgeAsMonths();
            // if 0, that means the goal was created this month
            if (monthCount == 0)
                monthCount = 1;
        }

        return GetActionDataByMonth(monthCount);
    }

    //This function sets up the chart itself, so it can be populated with data later
    private void CreateChart()
    {
        _lineConfig = new LineConfig
        {
            Options = new LineOptions
            {
                AspectRatio = 1,
                Responsive = true,

                Scales = new ChartJs.Blazor.LineChart.Scales
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new CategoryAxis
                        {
                             Ticks = new CategoryTicks
                             {
                                 AutoSkipPadding = 50,
                                 Minor = new MinorTicks
                                 {
                                     FontColor = "#800080",
                                 },

                                 Major = new MajorTicks
                                 {
                                     Enabled = true,
                                     FontColor = "#00ff00",
                                 }
                             }
                        }
                    },
                },

                Tooltips = new Tooltips
                {
                    BackgroundColor = "white",
                    BodyFontColor = "#000",
                    TitleFontColor = "#F123",
                    BodySpacing = 10,
                    TitleSpacing = 10,
                    TitleMarginBottom = 5,
                    DisplayColors = true,
                },
                
                Legend = new Legend
                {
                        Display = false,
                },

                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Action Data For " + selectedGoal.Title,
                }
            }
        };
    }

    //Get the age of goal in months
    private int GoalAgeAsMonths()
    {
        DateTime currentDate = DateTime.Now;
        string year = currentDate.ToString("yyyy");
        string month = currentDate.ToString("MMMM");
        string goalCreationDate = selectedGoal.GoalCreationDate;
        int monthCount = 0;
        bool stop = false;
        while (stop == false)
        {
            if (goalCreationDate.Contains(year) && goalCreationDate.Contains(month))
            {
                stop = true;
            }
            else
            {
                currentDate = currentDate.AddMonths(-1);
                year = currentDate.ToString("yyyy");
                month = currentDate.ToString("MMMM");
                monthCount++;
            }
        }

        return monthCount;
    }

    //gets range of data from present date to past x amount of months (ex: i want data from now to 6 months ago... input 6)
    private List<GoalAction> GetActionDataByMonth(int monthCount)
    {
        DateTime date = DateTime.Now;
        List<GoalAction> chartActionData = new();

        //for each month, get the data for that month, then combine all requested month's data together into a list
        for (int i = 0; i <= monthCount; i++)
        {
            date = date.AddMonths(-i);
            string currentMonth = date.ToString("MMMM");
            string currentYear = date.ToString("yyyy");

            foreach (var action in selectedGoal.EntryData.GoalActions)
            {
                List<ActionCompleted> goalActions = new();

                foreach (var actionCompleted in action.ListActionsCompleted)
                {
                    if (actionCompleted.ActionCompletedDate.Contains(currentMonth) && actionCompleted.ActionCompletedDate.Contains(currentYear))
                    {
                        ActionCompleted newActionCompleted = new()
                        {
                            ActionsCompleted = actionCompleted.ActionsCompleted,
                            ActionCompletedDate = actionCompleted.ActionCompletedDate,
                        };
                        goalActions.Add(newActionCompleted);
                    }
                }

                GoalAction actionData = new()
                {
                        Action = action.Action,
                        ListActionsCompleted = goalActions,
                };

                chartActionData.Add(actionData);
            }
        }

        //remove empty data if there is no entry for in a month
        foreach (var action in chartActionData.ToList())
        {
            if (action.ListActionsCompleted.Count == 0)
                chartActionData.Remove(action);
        }
        
        return chartActionData;
    }
}
