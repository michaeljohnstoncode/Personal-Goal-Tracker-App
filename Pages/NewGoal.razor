@page "/newgoal"
@inject GoalDatabase goalDatabase;

<head>
    <title>New Goal Entry</title>
    <style>   
    p
    {
        padding-top: 40px;
        text-align: center;
    }
    </style>
</head>

<h2>New Goal Entry</h2>


<body>
    <form @onsubmit="SubmitForm">

    <p>
    <label for="entrytitle">Give your goal a title</label>
    <input type="text" @bind="goalTitle" name="goal" id="goaldescription"/>
    </p>

        <p>
    <label for="entrytitle">Give your goal a description</label>
    <input type="text" @bind="goalDescription" name="goal" id="goaldescription"/>
    </p>

    <p>
    <label for="time-spent-option" margin="30px">Record time spent</label>
    <input type="checkbox" @bind="addTimeSpent" id="time-spent-option"  />
    </p>


        <fieldset>
            @foreach (var exampleQuestion in exampleGoalQuestions)
            {
                string questionId = exampleQuestion.Key;
                string question = exampleQuestion.Question;

                <input type="checkbox" id="@questionId" name="goalquestion" @onchange="eventArgs => { QuestionIsChecked(questionId, eventArgs.Value); } ">
                <label for="@questionId">@question</label>
                <br>

            
            }
         
        </fieldset>

    <label for="questioninput"> Suggested questions don't meet your needs? Add your own (must be measurable on a 1-10 scale)</label>
    <input type="text" @bind="currentQuestion" name="questioninput" oninput="AddQuestion"/>
      
     <input type="submit">
    </form>
</body>




@code 
{
    public string goalTitle { get; set; } 
    public string goalDescription { get; set; }
    public bool addTimeSpent { get; set; } = true;

    GoalDatabase database;
    Goal newGoal = new();
    SampleQuestions sampleQuestions = new();
    List<ExampleGoalQuestions> exampleGoalQuestions = new();
    List<string> questionCheckedList = new();
    public string currentQuestion;

    protected override async Task OnInitializedAsync()
    {
        database = goalDatabase;
        exampleGoalQuestions = sampleQuestions.exGoalQuestions;
    }


    /*
    public NewGoal(GoalDatabase goalDatabase)
        {
        database = goalDatabase;
    }
    */


    public void SubmitTest()
    {
        foreach(var questionId in exampleGoalQuestions)
        {
            if (questionCheckedList.Contains(questionId.Key))
            {
                Console.WriteLine($"Submitted goal question: {questionId.Question}");
            }

        }
    }

    public async void SubmitForm()
    {

        //objects to fill so they can be set to a new goal
        GoalEntryQuestion goalEntryQuestion;
        List<GoalEntryQuestion> goalEntryQuestions = new();

        foreach(var question in exampleGoalQuestions)
        {
            if(questionCheckedList.Contains(question.Key))
            {
                goalEntryQuestion = new() { Question = question.Question };
                goalEntryQuestions.Add(goalEntryQuestion);
            }
        }

        //test if key and value are correctly set
        foreach(var question in goalEntryQuestions)
        {
            Console.WriteLine($"value: {question.Question}");
        }


        newGoal.Title = goalTitle;
        newGoal.GoalDescription = goalDescription;
        newGoal.AddTimeSpent = addTimeSpent;

        GoalEntriesData entryData = new()
        {
            GoalEntryQuestions = goalEntryQuestions,
        };
        newGoal.EntryData = entryData;


        //System.notsupportedexception "dont know about object(trainingprogressionapp.data.goalentrydata)"
        //TODO: https://social.msdn.microsoft.com/Forums/en-US/7b31670c-7661-4191-bf50-76b3aa7b0d89/dont-know-about-systemcollectionsgenericicollection1?forum=xamarinios
        //SQLite-net doesn't understand relationships or complex objects.
        //  It only knows how to serialise simple types. Depending on how you want to model this relationship, 
        // you could either have a detail table(and manually iterate the collection calling save for each item) 
        // or simply serialise the collection to JSON and store it in a large character field.
        var db = database.Database;

        await database.SaveItemAsync(newGoal);
    }

    public void CheckQuestionDictionary()
    {
        //class check dictionary
             //method check if key exists (bool)
             //require input of dictionary and int key. output bool
             //method check if value match exists (bool)
             //require input of dictionary and string value. output bool


        //if value does not exist, add new key-value pair
            
            //if adding new key-value pair, check if key exists
                 //if it exists, then get highest key in list, and add key-value above highest key (ex: key 5, value -> add key 6, value)
                 // var maxKey = occurrences.OrderByDescending(x => x.Value).First().Key;

        //new method to define for editing question
            //I want to edit this question, so...
                  //check for matching value
                  //get key of matching value IN dictionary
                  //replace matching value with new value using key

        //new method to delete a question
            //do you really want to delete this question? you may archive this question for later data viewing and/or reinstate it to be used again
            //yes? then delete the question and it's data

        //archive a question?
            // i no longer have use for this question, and i don't want to continue answering it. 
            // but i still am persuing this goal. and i want to be able to see the progression of the archived question
        
        

    }

    public void QuestionIsChecked(string questionId, object isChecked)
    {
        // if checkbox is checked and the question is not in the CheckedList, then add it
        if((bool)isChecked == true)
        {
            if (!questionCheckedList.Contains(questionId))
            {
                questionCheckedList.Add(questionId);
                Console.WriteLine($"Question added {questionId}");
            }
        }
        // if checkbox is unchecked, and it contains the question, then remove it
        else
        {
            if (questionCheckedList.Contains(questionId))
            {
                questionCheckedList.Remove(questionId);
                Console.WriteLine($"Question removed {questionId}");
            }
        }
    }

}
