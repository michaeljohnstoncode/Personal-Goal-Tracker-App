@page "/sample"
@inject GoalDatabase goalDatabase

<button @onclick="PopulateMany"> populate goal with question and action samples </button>

<br />
<br />

<button @onclick="PopulateSampleWithTime"> populate goal with time samples </button>

<br />
<br />

<button @onclick="PopulateNewEntryDates"> populate goal with NewEntryDates samples. used for displaying on calendar </button>

@code {
    List<Goal> goals = new();
    Goal goal;
    List<string> dates = new()
    {
        "Monday, July 11 2022",
        "Wednesday, July 20 2022",
        "Tuesday, September 6 2022",
        "Wednesday, September 7 2022",
        "Saturday, September 10 2022",
        "Thursday, September 15 2022",
        "Friday, September 16 2022",
        "Saturday, September 17 2022",
        "Wednesday, November 2 2022",
        "Thursday, November 3 2022",
        "Saturday, December 10 2022",
        "Sunday, December 18 2022",
        "Monday, December 19 2022",
        "Wednesday, December 21 2022",
        "Saturday, January 7 2023",
        "Tuesday, January 10 2023",
        "Thursday, January 19 2023",
        "Friday, January 20 2023",
        "Saturday, January 21 2023",
        "Sunday, January 22 2023",
        "Monday, January 23 2023",
        "Wednesday, February 1 2023",
        "Thursday, February 2 2023",
        "Friday, February 3 2023",
        "Saturday, February 4 2023",
        "Sunday, February 5 2023",
        "Monday, February 6 2023",
        "Tuesday, February 7 2023",
        "Wednesday, February 8 2023",
        "Thursday, February 9 2023",
        "Friday, February 10 2023",
        "Saturday, February 11 2023",
        "Sunday, February 12 2023",
        "Monday, February 13 2023",
        "Tuesday, February 14 2023",
        "Wednesday, February 15 2023",
        "Thursday, February 16 2023",
        "Friday, February 17 2023",
        "Saturday, February 18 2023",
        "Sunday, February 19 2023",
        "Monday, February 20 2023",
        "Tuesday, February 21 2023",
        "Wednesday, February 22 2023",
        "Thursday, February 23 2023",
        "Friday, February 24 2023",
        "Saturday, February 25 2023",
        "Sunday, February 26 2023",
        "Monday, February 27 2023",
        "Tuesday, February 28 2023",

    };

    //replace string input with desired goal title to populate with samples
    string goalTitle = "test";

    protected override async Task OnInitializedAsync()
    {
        goals = goalDatabase.GetItemsAsync();
        goal = goalDatabase.GetItem(goalTitle);
    }

    //delete specific date for fix
    public void Delete()
    {
        foreach(var question in goal.EntryData.GoalQuestions)
        {
            foreach(var questionrating in question.ListQuestionRatings.ToList())
            {
                if(questionrating.QuestionAnsweredDate == "Tuesday , January 16 2023")
                {
                    question.ListQuestionRatings.Remove(questionrating);
                    goalDatabase.SaveItem(goal);
                }
            }
        }
    }

    public void PopulateSampleWithTime()
    {
        Random rnd = new Random();
        List<TimeSpent> timeSpentList = new();

        foreach(var date in dates)
        {
            TimeSpent timeSpent = new()
            {
                TimeSpentMinutes = rnd.Next(1, 200),
                TimeSpentDate = date,
            };
            timeSpentList.Add(timeSpent);
        }

        goal.EntryData.AllTimeSpentMinutes = timeSpentList;

        goalDatabase.SaveItem(goal);
    }

    public void PopulateNewEntryDates()
    {
        goal.EntryData.NewEntryDates = dates;
        goalDatabase.SaveItem(goal);
    }

    public void PopulateMany()
    {
        foreach (var date in dates)
        {
            PopulateSample(date);
        }
    }

    public void PopulateSample(string dateSample)
    {
        foreach(var question in goal.EntryData.GoalQuestions)
        {
            Random rnd = new();

            QuestionRating questionRating = new()
                {
                    QuestionAnsweredDate = dateSample,
                    Rating = rnd.Next(1, 10),
            };

            question.ListQuestionRatings.Add(questionRating);
        }

        foreach(var action in goal.EntryData.GoalActions)
        {
            Random rnd = new();

            ActionCompleted actionCompleted = new()
                {
                    ActionCompletedDate = dateSample,
                    ActionsCompleted = rnd.Next(1, 50),
                };

            action.ListActionsCompleted.Add(actionCompleted);
        }

        goalDatabase.SaveItem(goal);
    }
}
