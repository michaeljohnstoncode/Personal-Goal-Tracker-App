@*
    This page will display an input field for the user to enter how much time they spent on the goal (in minutes as a double variable)
*@

@page "/newdayentry/timespent/{goalTitle}/{entryDate}"
@inject GoalDatabase goalDatabase
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<style>

    .time-spent-container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 80vh;
    background-color: #f5f5f5;
}

.time-spent-section {
    background-color: #e1e1e1;
    padding: 25px;
    border-radius: 5px;
    text-align: center;
}

.time-spent-label {
    font-weight: bold;
    color: #86529e;
    margin-right: 10px;
    font-size: 20px;
}

input[type="number"] {
    width: 60px;
    padding: 5px;
    border: 1px solid #86529e;
    border-radius: 3px;
}

    button[type="submit"] {
        background-color: #4caf50;
        color: #ffffff;
        border: none;
        padding: 10px 20px;
        font-size: 18px;
        font-weight: bold;
        border-radius: 5px;
        cursor: pointer;
        position: fixed;
        bottom: 10px;
        right: 10px;
    }

</style>

<div class="time-spent-container">
    <div class="time-spent-section">
        <!-- Input minutes spent on goal as a double -->
        <EditForm Model="timeSpent" OnValidSubmit="SubmitForm">
            <DataAnnotationsValidator />
            <p>
                <label for="timeSpent" class="time-spent-label">How many minutes did you spend on your goal today?</label>
                <input type="number" step="0.01" @bind="timeSpent.TimeSpentMinutes" name="timespent" id="timespent" placeholder=" " />
                <ValidationMessage For="@(() => timeSpent.TimeSpentMinutes)" />
            </p>
            <SubmitButton Id="submit-button" NameOfButton="@nameOfButton"> </SubmitButton>
        </EditForm>
    </div>

</div>

@code {

    [Parameter]
    public string goalTitle { get; set; }
    [Parameter]
    public string entryDate { get; set; }

    private TimeSpent timeSpent = new();
    private Goal currentGoal = new();
    private List<Goal> goals = new();
    public string nameOfButton;

    protected override async Task OnInitializedAsync()
    {
        currentGoal = goalDatabase.GetItem(goalTitle);
        nameOfButton = GetButtonName();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //load javascript function from index.html
        if (firstRender)
            await JSRuntime.InvokeVoidAsync("hideButtonOnFocus", new[] { "timespent" }, "submit-button");
    }

    //Checks which page to navigate to. If there are no questions or actions to answer, it will navigate back to the goals page.
    public string PageToNavigate()
    {
        if (currentGoal.EntryData.GoalQuestions.Count > 0)
        {
            return $"/newdayentry/answerquestions/{goalTitle}/{entryDate}";
        }
        else if (currentGoal.EntryData.GoalActions.Count > 0)
        {
            return $"/newdayentry/answeractions/{goalTitle}/{entryDate}";
        }
        else
        {
            currentGoal.EntryData.NewEntryDates.Add(entryDate);
            return "/goals";
        }
    }

    public string GetButtonName()
    {
        if (currentGoal.EntryData.GoalQuestions.Count > 0)
            return "Add Questions";
        else if (currentGoal.EntryData.GoalActions.Count > 0)
            return "Add Actions";
        else
            return "Complete Entry";
    }

    private async void SubmitForm()
    {
        TimeSpent timeSpentModel = new()
        {
            TimeSpentMinutes = timeSpent.TimeSpentMinutes,
            TimeSpentDate = entryDate,
        };

        currentGoal.EntryData.AllTimeSpentMinutes.Add(timeSpentModel);
        currentGoal.TotalTimeSpent += (double)timeSpent.TimeSpentMinutes;

        goalDatabase.SaveItem(currentGoal);

        string pageToNavigate = PageToNavigate();
        Navigation.NavigateTo(pageToNavigate);
    }
}
